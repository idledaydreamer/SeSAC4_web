<html>

<head>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <script>
        // Geolocation.js
        // export default {
        //     data() { return { lon: undefined, lat: undefined } },
        //     computed: { Latlon() { return { lat: +this.lat, lon: +this.lon } } },
        //     // watch: { latlon: 'fetchWeather' },
        //     // mounted () { return this.geolocation() },
        //     methods: {
        //         // fetchWeather ({ lat, lon }) { /* 서버로  API 요청 */ },
        //         watchPositionOnce() { /* ...생략... */ },
        //         toast() { /* ...토스트 알림... */ },
        //         getCurrentPosition(options) {
        //             return new Promise((resolve, reject) => navigator.geolocation
        //                 .getCurrentPosition(resolve, reject, options))
        //         },
        //         async updateLatlon(options) {
        //             const { coords } = await this.getCurrentPosition(options)
        //             const { latitude: lat, longitude: lon } = coords
        //             return Object.assign(this, { lat, lon })
        //         },
        //         geolocation(watch = true) {
        //             const msgs = [
        //                 '위치 정보 권한이 거부 되었습니다',
        //                 '위치 정보를 확인 할 수 없습니다'
        //             ]
        //             return this.updateLatlon({ timeout: 3000 })
        //                 .catch(e => {
        //                     const msg = msgs[e.code - 1]
        //                     if (msg) this.toast(msg)
        //                     console.error(e)
        //                 })
        //                 .finally(() => { if (watch) this.watchPositionOnce() })
        //         }
        //     }
        // }

        function getLocation() {
            if (navigator.geolocation) {
                console.log('geolocation');
                navigator.geolocation.getCurrentPosition(locationSuccess, locationError);
            } else {
                console.log("지오 로케이션 없음")
            }
        };
        // getLocation

        async function locationSuccess(p) {
            try {
                var latitude = p.coords.latitude, longitude = p.coords.longitude;

                // LCC DFS 좌표변환 ( code : "toXY"(위경도->좌표, v1:위도, v2:경도))
                function dfsXYConv(code, v1, v2) {
                    const { PI, tan, log, cos, pow, floor, sin, sqrt, atan, abs, atan2 } = Math;

                    // LCC DFS 좌표변환을 위한 기초 자료
                    const RE = 6371.00877; // 지구 반경(km)
                    const GRID = 5.0; // 격자 간격(km)
                    const SLAT1 = 30.0; // 투영 위도1(degree)
                    const SLAT2 = 60.0; // 투영 위도2(degree)
                    const OLON = 126.0;// 기준점 경도(degree)
                    const OLAT = 38.0; // 기준점 위도(degree)
                    const XO = 43; // 기준점 X좌표(GRID)
                    const YO = 136; // 기1준점 Y좌표(GRID)

                    const DEGRAD = PI / 180.0;
                    const RADDEG = 180.0 / PI;

                    const re = RE / GRID;
                    const slat1 = SLAT1 * DEGRAD;
                    const slat2 = SLAT2 * DEGRAD;
                    const olon = OLON * DEGRAD;
                    const olat = OLAT * DEGRAD;

                    let sn = tan(PI * 0.25 + slat2 * 0.5) / tan(PI * 0.25 + slat1 * 0.5);
                    sn = log(cos(slat1) / cos(slat2)) / log(sn);
                    let sf = tan(PI * 0.25 + slat1 * 0.5);
                    sf = pow(sf, sn) * cos(slat1) / sn;
                    let ro = tan(PI * 0.25 + olat * 0.5);
                    ro = re * sf / pow(ro, sn);
                    const rs = {};
                    let ra, theta;


                    if (code === 'toXY') {
                        rs.lat = v1;
                        rs.lon = v2;
                        ra = tan(PI * 0.25 + (v1) * DEGRAD * 0.5);
                        ra = re * sf / pow(ra, sn);
                        theta = v2 * DEGRAD - olon;
                        if (theta > PI) theta -= 2.0 * PI;
                        if (theta < -PI) theta += 2.0 * PI;
                        theta *= sn;
                        rs.nx = floor(ra * sin(theta) + XO + 0.5);
                        rs.ny = floor(ro - ra * cos(theta) + YO + 0.5);
                    } else {
                        rs.nx = v1;
                        rs.ny = v2;
                        const xn = v1 - XO;
                        const yn = ro - v2 + YO;
                        ra = sqrt(xn * xn + yn * yn);
                        if (sn < 0.0) ra = -ra;
                        let alat = pow((re * sf / ra), (1.0 / sn));
                        alat = 2.0 * atan(alat) - PI * 0.5;

                        if (abs(xn) <= 0.0) {
                            theta = 0.0;
                        } else {
                            if (abs(yn) <= 0.0) {
                                theta = PI * 0.5;
                                if (xn < 0.0) theta = -theta;
                            } else theta = atan2(xn, yn);
                        }
                        const alon = theta / sn + olon;
                        rs.lat = alat * RADDEG;
                        rs.lon = alon * RADDEG;
                    }
                    return rs;
                }
                var rs = await dfsXYConv("toXY", latitude, longitude);

                // CurrentWth 요청
                await axios({
                    method: 'get',
                    url: 'http://localhost:8000/test',
                    params: {
                        nx: rs.nx,
                        ny: rs.ny
                    },
                }).then(function (response) {
                    console.log(response.data);
                })
            } catch (error) { throw error; }
        }

        // locationSuccess

        function locationError(error) {
            var errorTypes = {
                0: "무슨 에러냥~",
                1: "허용 안눌렀음",
                2: "위치가 안잡힘",
                3: "응답시간 지남"
            };
            var errorMsg = errorTypes[error.code];
            console.log(errorMsg)
        }
        // locationError

        // function getAxios() {
        //     let params = {
        //         serviceKey: "Su%2FjD4AQWu0vPPnQkcm0dVbiPxWqLgUu6AN6Snk4oK0JGGr38kehRNwGQtPIWP9iZ7BzO%2FQccEWTlb5yAxsUPw%3D%3D",
        //         numOfRows: 3,
        //         pageNo: 1,
        //         base_date: "20220817",
        //         dataType: "JSON",
        //         base_time: "0600",
        //         nx: 55,
        //         ny: 127
        //     }

        //     axios({
        //         method: "get",
        //         url: "http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst",
        //         params: params
        //     }).then((result) => {
        //         console.log(result);
        //     })
        // }

        // $.get('/test', function (result) {
        //     console.log(result);
        //     // console.log(result.body);
        // });


    </script>
</head>

<body>
    <!-- <button type="button" onclick="getAxios();">데이터 가져오기</button> -->
    <button type="button" onclick="getLocation();">위치 가져오기</button>
</body>

</html>